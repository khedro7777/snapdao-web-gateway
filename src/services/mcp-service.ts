export interface MCPAction {
  id: string;
  type: 'create_proposal' | 'join_group' | 'create_task' | 'update_status' | 'send_message' | 'create_workflow' | 'assign_task';
  description: string;
  parameters: Record<string, any>;
  executed: boolean;
  executedAt?: Date;
  userAccepted: boolean;
  acceptedAt?: Date;
  createdAt: Date;
}

export interface MCPQuery {
  id: string;
  userQuery: string;
  aiResponse: string;
  suggestedActions: MCPAction[];
  createdAt: Date;
}

export class MCPService {
  private queries: MCPQuery[] = [];
  private actions: MCPAction[] = [];

  async processQuery(userQuery: string): Promise<MCPQuery> {
    // ูุญุงูุงุฉ ูุนุงูุฌุฉ ุงูุฐูู ุงูุงุตุทูุงุนู ููุงุณุชุนูุงู ูุน ุงุณุชุฌุงุจุงุช ุฃูุซุฑ ุฐูุงุกู
    const aiResponse = this.generateSmartAIResponse(userQuery);
    const suggestedActions = this.generateSuggestedActions(userQuery);

    const query: MCPQuery = {
      id: Date.now().toString(),
      userQuery,
      aiResponse,
      suggestedActions,
      createdAt: new Date()
    };

    this.queries.push(query);
    this.actions.push(...suggestedActions);

    return query;
  }

  private generateSmartAIResponse(userQuery: string): string {
    const lowerQuery = userQuery.toLowerCase();
    
    // ุงุณุชุฌุงุจุงุช ุฐููุฉ ูููุตูุฉ ุฃูุซุฑ
    if (lowerQuery.includes('ุณูุฑ ุนูู') || lowerQuery.includes('workflow')) {
      return `๐ ููุชุงุฒ! ูููููู ูุณุงุนุฏุชู ูู ุฅูุดุงุก ูุฅุฏุงุฑุฉ ุณูุฑ ุงูุนูู ุจุทุฑููุฉ ุงุญุชุฑุงููุฉ. 

      ๐ ูููููู:
      โข ุฅูุดุงุก ููุงูุจ ุณูุฑ ุนูู ูุฎุตุตุฉ ุญุณุจ ููุน ูุดุฑูุนู
      โข ุชูุธูู ุงูููุงู ูุงููุฑุงุญู ุจุดูู ููุทูู
      โข ุชุนููู ุงููุณุคูููุงุช ูุชุญุฏูุฏ ุงูููุงุนูุฏ ุงูููุงุฆูุฉ
      โข ุฅุนุฏุงุฏ ูุธุงู ูุชุงุจุนุฉ ุชููุงุฆู ููุชูุฏู
      โข ุฅูุดุงุก ุชูุงุฑูุฑ ุฃุฏุงุก ููุตูุฉ
      
      ูู ุชุฑูุฏ ุงูุจุฏุก ุจุฅูุดุงุก ุณูุฑ ุนูู ุฌุฏูุฏุ`;
    }
    
    if (lowerQuery.includes('ุชุญููู') || lowerQuery.includes('arbitration')) {
      return `โ๏ธ ุณุฃุณุงุนุฏู ูู ุฅุฏุงุฑุฉ ุนูููุฉ ุงูุชุญููู ุจููุงุกุฉ ุนุงููุฉ.

      ๐ฏ ุฎุฏูุงุช ุงูุชุญููู ุงููุชุงุญุฉ:
      โข ุชุณุฌูู ุงููุฒุงุนุงุช ุงูุฌุฏูุฏุฉ
      โข ุชุนููู ูุญูููู ูุคูููู
      โข ุฅุฏุงุฑุฉ ุงูุฌูุณุงุช ูุงูููุงุนูุฏ
      โข ุชุชุจุน ุงููุณุชูุฏุงุช ูุงูุฃุฏูุฉ
      โข ุฅุตุฏุงุฑ ุงููุฑุงุฑุงุช ุงูููุงุฆูุฉ
      โข ุฃุฑุดูุฉ ุงููุถุงูุง ุงููุญูููุฉ
      
      ูู ุชุฑูุฏ ุจุฏุก ุนูููุฉ ุชุญููู ุฌุฏูุฏุฉ ุฃู ูุชุงุจุนุฉ ูุถูุฉ ููุฌูุฏุฉุ`;
    }
    
    if (lowerQuery.includes('ูุฌููุนุฉ') || lowerQuery.includes('group')) {
      return `๐ฅ ุฑุงุฆุน! ุฅูุดุงุก ุงููุฌููุนุงุช ุงูุชุนุงูููุฉ ูู ุฃุณุงุณ ุงููุฌุงุญ ูู ุงููุดุงุฑูุน.

      ๐ ุณุฃุณุงุนุฏู ูู:
      โข ุชุดููู ูุฌููุนุฉ ุนูู ูุชุฎุตุตุฉ
      โข ุชุญุฏูุฏ ุงูุฃุฏูุงุฑ ูุงููุณุคูููุงุช
      โข ุฅุนุฏุงุฏ ูููุงุช ุงูุชูุงุตู ุงููุนุงู
      โข ูุถุน ููุงุนุฏ ุงูุนูู ุงูุฌูุงุนู
      โข ุชูุธูู ุงูุงุฌุชูุงุนุงุช ูุงููุชุงุจุนุฉ
      โข ููุงุณ ุฃุฏุงุก ุงููุฑูู
      
      ูุง ููุน ุงููุฌููุนุฉ ุงูุชู ุชุฑูุฏ ุฅูุดุงุคูุงุ`;
    }
    
    if (lowerQuery.includes('ูุดุฑูุน') || lowerQuery.includes('project')) {
      return `๐ฏ ููุชุงุฒ! ุฅุฏุงุฑุฉ ุงููุดุงุฑูุน ูู ุชุฎุตุตู ุงูุฃุณุงุณู.

      ๐ ุฎุฏูุงุช ุฅุฏุงุฑุฉ ุงููุดุงุฑูุน:
      โข ุชุฎุทูุท ุงููุดุฑูุน ูู ุงูุจุฏุงูุฉ ููููุงูุฉ
      โข ุชุญููู ุงููุฎุงุทุฑ ููุถุน ุงูุญููู
      โข ุชุฎุตูุต ุงูููุงุฑุฏ ูุงูููุฒุงููุงุช
      โข ุฌุฏููุฉ ุงูููุงู ูุงููุนุงูู ุงููููุฉ
      โข ูุฑุงูุจุฉ ุงูุชูุฏู ูุงูุฌูุฏุฉ
      โข ุฅุนุฏุงุฏ ุงูุชูุงุฑูุฑ ุงูุชูููุฐูุฉ
      
      ูู ุชุฑูุฏ ุฅูุดุงุก ูุดุฑูุน ุฌุฏูุฏ ุฃู ุชุญุณูู ูุดุฑูุน ูุงุฆูุ`;
    }
    
    if (lowerQuery.includes('ููุชุฑุญ') || lowerQuery.includes('proposal')) {
      return `๐ ุณุฃุณุงุนุฏู ูู ุฅุนุฏุงุฏ ููุชุฑุญ ุงุญุชุฑุงูู ููููุน.

      โจ ุนูุงุตุฑ ุงูููุชุฑุญ ุงููุงุฌุญ:
      โข ุชุญุฏูุฏ ุงูุฃูุฏุงู ูุงููุชุงุฆุฌ ุงููุชููุนุฉ
      โข ูุถุน ุฎุทุฉ ุฒูููุฉ ูุงูุนูุฉ
      โข ุชูุฏูุฑ ุงูุชูุงููู ูุงูููุงุฑุฏ
      โข ุชุญููู ุงูููุงุฆุฏ ูุงููุฎุงุทุฑ
      โข ุชุตููู ุขููุฉ ุงูุชูููุฐ ูุงููุชุงุจุนุฉ
      โข ุฅุนุฏุงุฏ ูุธุงู ุงูุชุตููุช ูุงูููุงููุฉ
      
      ุนูู ุฃู ููุถูุน ุชุฑูุฏ ุฅุนุฏุงุฏ ุงูููุชุฑุญุ`;
    }

    if (lowerQuery.includes('ุชูุฏู') || lowerQuery.includes('progress') || lowerQuery.includes('ุชูุฑูุฑ') || lowerQuery.includes('report')) {
      return `๐ ููุชุงุฒ! ุงูุชูุงุฑูุฑ ูุงููุชุงุจุนุฉ ุฃุณุงุณูุฉ ููุฌุงุญ ุฃู ูุดุฑูุน.

      ๐ ุชูุงุฑูุฑ ุดุงููุฉ ูุชุงุญุฉ:
      โข ุชูุฑูุฑ ุชูุฏู ุงููุดุงุฑูุน ูุงูููุงู
      โข ุชุญููู ุฃุฏุงุก ุงููุฑู ูุงูุฃูุฑุงุฏ
      โข ุฅุญุตุงุฆูุงุช ุงูุฅูุฌุงุฒ ูุงูุชุฃุฎูุฑ
      โข ุชูููู ุงุณุชุฎุฏุงู ุงูููุงุฑุฏ
      โข ูุคุดุฑุงุช ุงูุฌูุฏุฉ ูุงูุฑุถุง
      โข ุชููุนุงุช ุงูุฅูุฌุงุฒ ุงููุณุชูุจูู
      
      ุฃู ููุน ูู ุงูุชูุงุฑูุฑ ุชุญุชุงุฌุ`;
    }

    if (lowerQuery.includes('ุชุตููุช') || lowerQuery.includes('voting')) {
      return `๐ณ๏ธ ูุธุงู ุงูุชุตููุช ุงูุฏูููุฑุงุทู ูู ููุจ ููุตุชูุง!

      ๐ฏ ุฎูุงุฑุงุช ุงูุชุตููุช ุงููุชูุฏูุฉ:
      โข ุชุตููุช ุจุณูุท (ูุนู/ูุง)
      โข ุชุตููุช ูุชุนุฏุฏ ุงูุฎูุงุฑุงุช
      โข ุชุตููุช ูุฑุฌุญ ุญุณุจ ุงูุฎุจุฑุฉ
      โข ุชุตููุช ุณุฑู ุฃู ุนููู
      โข ุชุตููุช ูุญุฏูุฏ ุจููุช
      โข ุชุตููุช ุชุฑุงููู ููุฃููููุงุช
      
      ูุง ููุถูุน ุงูุชุตููุช ุงูุฐู ุชุฑูุฏ ุฅูุดุงุคูุ`;
    }

    // ุงุณุชุฌุงุจุฉ ุงูุชุฑุงุถูุฉ ุฐููุฉ
    return `๐ค ุฃููู ุทูุจู ุชูุงูุงู! ููุณุงุนุฏ ุฐูู ูุชุฎุตุต ูู ุฅุฏุงุฑุฉ ุงููุดุงุฑูุน ูุงูุชุนุงูู ุงูุฌูุงุนูุ ูููููู ูุณุงุนุฏุชู ูู:

    ๐ฏ ุงููุฌุงูุงุช ุงูุฃุณุงุณูุฉ:
    โข ุฅุฏุงุฑุฉ ุงููุดุงุฑูุน ูุณูุฑ ุงูุนูู
    โข ุชูุณูู ุงููุฑู ูุงููุฌููุนุงุช
    โข ูุธุงู ุงูุชุตููุช ูุงูููุชุฑุญุงุช
    โข ุงูุชุญููู ูุญู ุงููุฒุงุนุงุช
    โข ุฅุนุฏุงุฏ ุงูุชูุงุฑูุฑ ูุงูุชุญูููุงุช
    โข ุฃุชูุชุฉ ุงูููุงู ุงูุฑูุชูููุฉ
    
    ุงุฎุชุฑ ุงููุฌุงู ุงูุฐู ุชุฑูุฏ ุงูุชุฑููุฒ ุนููู ูุณุฃูุฏู ูู ุญูููุงู ูุฎุตุตุฉ! ๐`;
  }

  private generateSuggestedActions(userQuery: string): MCPAction[] {
    const lowerQuery = userQuery.toLowerCase();
    const actions: MCPAction[] = [];

    if (lowerQuery.includes('ุณูุฑ ุนูู') || lowerQuery.includes('workflow')) {
      actions.push({
        id: Date.now().toString() + '_workflow_template',
        type: 'create_workflow',
        description: 'ุฅูุดุงุก ุณูุฑ ุนูู ูู ูุงูุจ ุฌุงูุฒ',
        parameters: { 
          templateType: 'project_management',
          includeAutomation: true,
          enableNotifications: true
        },
        executed: false,
        userAccepted: false,
        createdAt: new Date()
      });

      actions.push({
        id: Date.now().toString() + '_workflow_custom',
        type: 'create_workflow',
        description: 'ุฅูุดุงุก ุณูุฑ ุนูู ูุฎุตุต',
        parameters: { 
          workflowType: 'custom',
          steps: [],
          enableTracking: true
        },
        executed: false,
        userAccepted: false,
        createdAt: new Date()
      });
    }

    if (lowerQuery.includes('ุชุญููู') || lowerQuery.includes('arbitration')) {
      actions.push({
        id: Date.now().toString() + '_new_dispute',
        type: 'create_task',
        description: 'ุฅูุดุงุก ูุถูุฉ ุชุญููู ุฌุฏูุฏุฉ',
        parameters: { 
          disputeType: 'commercial',
          autoAssignMediator: true,
          enableIPFS: true
        },
        executed: false,
        userAccepted: false,
        createdAt: new Date()
      });
    }

    if (lowerQuery.includes('ูุฌููุนุฉ') || lowerQuery.includes('group')) {
      actions.push({
        id: Date.now().toString() + '_create_group',
        type: 'join_group',
        description: 'ุฅูุดุงุก ูุฌููุนุฉ ุนูู ูุชูุฏูุฉ',
        parameters: { 
          groupType: 'collaborative',
          enableVoting: true,
          setupWorkflow: true,
          inviteMembers: true
        },
        executed: false,
        userAccepted: false,
        createdAt: new Date()
      });
    }

    if (lowerQuery.includes('ูุดุฑูุน') || lowerQuery.includes('project')) {
      actions.push({
        id: Date.now().toString() + '_project_wizard',
        type: 'create_task',
        description: 'ุชุดุบูู ูุนุงูุฌ ุฅูุดุงุก ุงููุดุฑูุน',
        parameters: { 
          useWizard: true,
          includeTemplates: true,
          setupTeam: true,
          createTimeline: true
        },
        executed: false,
        userAccepted: false,
        createdAt: new Date()
      });
    }

    if (lowerQuery.includes('ุชูุฏู') || lowerQuery.includes('progress') || lowerQuery.includes('ุชูุฑูุฑ') || lowerQuery.includes('report')) {
      actions.push({
        id: Date.now().toString() + '_analytics_dashboard',
        type: 'update_status',
        description: 'ูุชุญ ููุญุฉ ุงูุชุญูููุงุช ุงูุดุงููุฉ',
        parameters: { 
          reportType: 'comprehensive',
          includeCharts: true,
          enableExport: true,
          realTimeData: true
        },
        executed: false,
        userAccepted: false,
        createdAt: new Date()
      });
    }

    return actions;
  }

  async acceptAction(actionId: string): Promise<boolean> {
    const action = this.actions.find(a => a.id === actionId);
    if (!action) return false;

    action.userAccepted = true;
    action.acceptedAt = new Date();

    console.log(`Action accepted: ${actionId} at ${new Date().toISOString()}`);
    
    return true;
  }

  async executeAction(actionId: string): Promise<boolean> {
    const action = this.actions.find(a => a.id === actionId);
    if (!action || !action.userAccepted) return false;

    // ุชูููุฐ ุงูุฅุฌุฑุงุก ุจูุงุกู ุนูู ููุนู
    switch (action.type) {
      case 'create_workflow':
        console.log('Creating workflow:', action.parameters);
        break;
      case 'create_proposal':
        console.log('Creating proposal:', action.parameters);
        break;
      case 'join_group':
        console.log('Creating group:', action.parameters);
        break;
      case 'create_task':
        console.log('Creating task:', action.parameters);
        break;
      case 'assign_task':
        console.log('Assigning task:', action.parameters);
        break;
      case 'update_status':
        console.log('Updating status:', action.parameters);
        break;
      default:
        console.log('Executing action:', action.type, action.parameters);
    }

    action.executed = true;
    action.executedAt = new Date();

    return true;
  }

  getAllQueries(): MCPQuery[] {
    return this.queries;
  }

  getAllActions(): MCPAction[] {
    return this.actions;
  }

  getPendingActions(): MCPAction[] {
    return this.actions.filter(action => !action.executed && action.userAccepted);
  }

  getActionsByType(type: MCPAction['type']): MCPAction[] {
    return this.actions.filter(action => action.type === type);
  }

  generateWorkflowInsights(): {
    totalActions: number;
    executedActions: number;
    pendingActions: number;
    successRate: number;
    commonActionTypes: { type: string; count: number }[];
  } {
    const totalActions = this.actions.length;
    const executedActions = this.actions.filter(a => a.executed).length;
    const pendingActions = this.actions.filter(a => a.userAccepted && !a.executed).length;
    const successRate = totalActions > 0 ? Math.round((executedActions / totalActions) * 100) : 0;

    // ุญุณุงุจ ุฃููุงุน ุงูุฅุฌุฑุงุกุงุช ุงูุฃูุซุฑ ุดููุนุงู
    const actionTypeCounts = this.actions.reduce((acc, action) => {
      acc[action.type] = (acc[action.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const commonActionTypes = Object.entries(actionTypeCounts)
      .map(([type, count]) => ({ type, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);

    return {
      totalActions,
      executedActions,
      pendingActions,
      successRate,
      commonActionTypes
    };
  }
}
